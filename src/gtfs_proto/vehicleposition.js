// source: gtfs-realtime.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.transit_realtime.VehiclePosition');
goog.provide('proto.transit_realtime.VehiclePosition.CongestionLevel');
goog.provide('proto.transit_realtime.VehiclePosition.OccupancyStatus');
goog.provide('proto.transit_realtime.VehiclePosition.VehicleStopStatus');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.transit_realtime.Position');
goog.require('proto.transit_realtime.TripDescriptor');
goog.require('proto.transit_realtime.VehicleDescriptor');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_realtime.VehiclePosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 10, null, null);
};
goog.inherits(proto.transit_realtime.VehiclePosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transit_realtime.VehiclePosition.displayName = 'proto.transit_realtime.VehiclePosition';
}

/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.transit_realtime.VehiclePosition.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.transit_realtime.VehiclePosition.extensionsBinary = {};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_realtime.VehiclePosition.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_realtime.VehiclePosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_realtime.VehiclePosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_realtime.VehiclePosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    trip: (f = msg.getTrip()) && proto.transit_realtime.TripDescriptor.toObject(includeInstance, f),
    vehicle: (f = msg.getVehicle()) && proto.transit_realtime.VehicleDescriptor.toObject(includeInstance, f),
    position: (f = msg.getPosition()) && proto.transit_realtime.Position.toObject(includeInstance, f),
    currentStopSequence: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    stopId: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    currentStatus: jspb.Message.getFieldWithDefault(msg, 4, 2),
    timestamp: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    congestionLevel: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    occupancyStatus: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.transit_realtime.VehiclePosition.extensions, proto.transit_realtime.VehiclePosition.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_realtime.VehiclePosition}
 */
proto.transit_realtime.VehiclePosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_realtime.VehiclePosition;
  return proto.transit_realtime.VehiclePosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_realtime.VehiclePosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_realtime.VehiclePosition}
 */
proto.transit_realtime.VehiclePosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.transit_realtime.TripDescriptor;
      reader.readMessage(value,proto.transit_realtime.TripDescriptor.deserializeBinaryFromReader);
      msg.setTrip(value);
      break;
    case 8:
      var value = new proto.transit_realtime.VehicleDescriptor;
      reader.readMessage(value,proto.transit_realtime.VehicleDescriptor.deserializeBinaryFromReader);
      msg.setVehicle(value);
      break;
    case 2:
      var value = new proto.transit_realtime.Position;
      reader.readMessage(value,proto.transit_realtime.Position.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrentStopSequence(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setStopId(value);
      break;
    case 4:
      var value = /** @type {!proto.transit_realtime.VehiclePosition.VehicleStopStatus} */ (reader.readEnum());
      msg.setCurrentStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {!proto.transit_realtime.VehiclePosition.CongestionLevel} */ (reader.readEnum());
      msg.setCongestionLevel(value);
      break;
    case 9:
      var value = /** @type {!proto.transit_realtime.VehiclePosition.OccupancyStatus} */ (reader.readEnum());
      msg.setOccupancyStatus(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader,
        proto.transit_realtime.VehiclePosition.extensionsBinary,
        proto.transit_realtime.VehiclePosition.prototype.getExtension,
        proto.transit_realtime.VehiclePosition.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_realtime.VehiclePosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_realtime.VehiclePosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_realtime.VehiclePosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_realtime.VehiclePosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrip();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.transit_realtime.TripDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getVehicle();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.transit_realtime.VehicleDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.transit_realtime.Position.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {!proto.transit_realtime.VehiclePosition.VehicleStopStatus} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = /** @type {!proto.transit_realtime.VehiclePosition.CongestionLevel} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = /** @type {!proto.transit_realtime.VehiclePosition.OccupancyStatus} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeEnum(
      9,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.transit_realtime.VehiclePosition.extensionsBinary, proto.transit_realtime.VehiclePosition.prototype.getExtension);
};


/**
 * @enum {number}
 */
proto.transit_realtime.VehiclePosition.VehicleStopStatus = {
  INCOMING_AT: 0,
  STOPPED_AT: 1,
  IN_TRANSIT_TO: 2
};

/**
 * @enum {number}
 */
proto.transit_realtime.VehiclePosition.CongestionLevel = {
  UNKNOWN_CONGESTION_LEVEL: 0,
  RUNNING_SMOOTHLY: 1,
  STOP_AND_GO: 2,
  CONGESTION: 3,
  SEVERE_CONGESTION: 4
};

/**
 * @enum {number}
 */
proto.transit_realtime.VehiclePosition.OccupancyStatus = {
  EMPTY: 0,
  MANY_SEATS_AVAILABLE: 1,
  FEW_SEATS_AVAILABLE: 2,
  STANDING_ROOM_ONLY: 3,
  CRUSHED_STANDING_ROOM_ONLY: 4,
  FULL: 5,
  NOT_ACCEPTING_PASSENGERS: 6
};

/**
 * optional TripDescriptor trip = 1;
 * @return {?proto.transit_realtime.TripDescriptor}
 */
proto.transit_realtime.VehiclePosition.prototype.getTrip = function() {
  return /** @type{?proto.transit_realtime.TripDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.transit_realtime.TripDescriptor, 1));
};


/**
 * @param {?proto.transit_realtime.TripDescriptor|undefined} value
 * @return {!proto.transit_realtime.VehiclePosition} returns this
*/
proto.transit_realtime.VehiclePosition.prototype.setTrip = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transit_realtime.VehiclePosition} returns this
 */
proto.transit_realtime.VehiclePosition.prototype.clearTrip = function() {
  return this.setTrip(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transit_realtime.VehiclePosition.prototype.hasTrip = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VehicleDescriptor vehicle = 8;
 * @return {?proto.transit_realtime.VehicleDescriptor}
 */
proto.transit_realtime.VehiclePosition.prototype.getVehicle = function() {
  return /** @type{?proto.transit_realtime.VehicleDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.transit_realtime.VehicleDescriptor, 8));
};


/**
 * @param {?proto.transit_realtime.VehicleDescriptor|undefined} value
 * @return {!proto.transit_realtime.VehiclePosition} returns this
*/
proto.transit_realtime.VehiclePosition.prototype.setVehicle = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transit_realtime.VehiclePosition} returns this
 */
proto.transit_realtime.VehiclePosition.prototype.clearVehicle = function() {
  return this.setVehicle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transit_realtime.VehiclePosition.prototype.hasVehicle = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Position position = 2;
 * @return {?proto.transit_realtime.Position}
 */
proto.transit_realtime.VehiclePosition.prototype.getPosition = function() {
  return /** @type{?proto.transit_realtime.Position} */ (
    jspb.Message.getWrapperField(this, proto.transit_realtime.Position, 2));
};


/**
 * @param {?proto.transit_realtime.Position|undefined} value
 * @return {!proto.transit_realtime.VehiclePosition} returns this
*/
proto.transit_realtime.VehiclePosition.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transit_realtime.VehiclePosition} returns this
 */
proto.transit_realtime.VehiclePosition.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transit_realtime.VehiclePosition.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 current_stop_sequence = 3;
 * @return {number}
 */
proto.transit_realtime.VehiclePosition.prototype.getCurrentStopSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.transit_realtime.VehiclePosition} returns this
 */
proto.transit_realtime.VehiclePosition.prototype.setCurrentStopSequence = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transit_realtime.VehiclePosition} returns this
 */
proto.transit_realtime.VehiclePosition.prototype.clearCurrentStopSequence = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transit_realtime.VehiclePosition.prototype.hasCurrentStopSequence = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string stop_id = 7;
 * @return {string}
 */
proto.transit_realtime.VehiclePosition.prototype.getStopId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.transit_realtime.VehiclePosition} returns this
 */
proto.transit_realtime.VehiclePosition.prototype.setStopId = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transit_realtime.VehiclePosition} returns this
 */
proto.transit_realtime.VehiclePosition.prototype.clearStopId = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transit_realtime.VehiclePosition.prototype.hasStopId = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional VehicleStopStatus current_status = 4;
 * @return {!proto.transit_realtime.VehiclePosition.VehicleStopStatus}
 */
proto.transit_realtime.VehiclePosition.prototype.getCurrentStatus = function() {
  return /** @type {!proto.transit_realtime.VehiclePosition.VehicleStopStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 2));
};


/**
 * @param {!proto.transit_realtime.VehiclePosition.VehicleStopStatus} value
 * @return {!proto.transit_realtime.VehiclePosition} returns this
 */
proto.transit_realtime.VehiclePosition.prototype.setCurrentStatus = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transit_realtime.VehiclePosition} returns this
 */
proto.transit_realtime.VehiclePosition.prototype.clearCurrentStatus = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transit_realtime.VehiclePosition.prototype.hasCurrentStatus = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 timestamp = 5;
 * @return {number}
 */
proto.transit_realtime.VehiclePosition.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.transit_realtime.VehiclePosition} returns this
 */
proto.transit_realtime.VehiclePosition.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transit_realtime.VehiclePosition} returns this
 */
proto.transit_realtime.VehiclePosition.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transit_realtime.VehiclePosition.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional CongestionLevel congestion_level = 6;
 * @return {!proto.transit_realtime.VehiclePosition.CongestionLevel}
 */
proto.transit_realtime.VehiclePosition.prototype.getCongestionLevel = function() {
  return /** @type {!proto.transit_realtime.VehiclePosition.CongestionLevel} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.transit_realtime.VehiclePosition.CongestionLevel} value
 * @return {!proto.transit_realtime.VehiclePosition} returns this
 */
proto.transit_realtime.VehiclePosition.prototype.setCongestionLevel = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transit_realtime.VehiclePosition} returns this
 */
proto.transit_realtime.VehiclePosition.prototype.clearCongestionLevel = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transit_realtime.VehiclePosition.prototype.hasCongestionLevel = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional OccupancyStatus occupancy_status = 9;
 * @return {!proto.transit_realtime.VehiclePosition.OccupancyStatus}
 */
proto.transit_realtime.VehiclePosition.prototype.getOccupancyStatus = function() {
  return /** @type {!proto.transit_realtime.VehiclePosition.OccupancyStatus} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.transit_realtime.VehiclePosition.OccupancyStatus} value
 * @return {!proto.transit_realtime.VehiclePosition} returns this
 */
proto.transit_realtime.VehiclePosition.prototype.setOccupancyStatus = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transit_realtime.VehiclePosition} returns this
 */
proto.transit_realtime.VehiclePosition.prototype.clearOccupancyStatus = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transit_realtime.VehiclePosition.prototype.hasOccupancyStatus = function() {
  return jspb.Message.getField(this, 9) != null;
};


